import { describe, expect, it } from "vitest"
import { Manip } from "./manip"

describe("Manip", () => {
   it("should convert string to title case", () => {
      expect(Manip.toTitleCase("hello world")).toBe("Hello World")
      expect(Manip.toTitleCase("javaScript is awesome")).toBe("Javascript Is Awesome")
      expect(Manip.toTitleCase("HELLO WORLD")).toBe("Hello World")
      expect(Manip.toTitleCase("hElLo WoRlD")).toBe("Hello World")
      expect(Manip.toTitleCase("")).toBe("")
      expect(Manip.toTitleCase("a")).toBe("A")
      expect(Manip.toTitleCase("a b c")).toBe("A B C")
      expect(Manip.toTitleCase("123 abc")).toBe("123 Abc")
      expect(Manip.toTitleCase("abc123")).toBe("Abc123")
      expect(Manip.toTitleCase("javaScript")).toBe("Javascript")
      expect(Manip.toTitleCase("multiple words here")).toBe("Multiple Words Here")
      expect(Manip.toTitleCase("  leading and trailing spaces  ")).toBe("  Leading And Trailing Spaces  ")
      expect(Manip.toTitleCase("special characters !@#")).toBe("Special Characters !@#")
      expect(Manip.toTitleCase("mixed CASE")).toBe("Mixed Case")
      expect(Manip.toTitleCase("singleWord")).toBe("Singleword")
   })

   it("should reverse a string", () => {
      expect(Manip.reverseString("hello")).toBe("olleh")
      expect(Manip.reverseString("world")).toBe("dlrow")
      expect(Manip.reverseString("")).toBe("")
      expect(Manip.reverseString("a")).toBe("a")
      expect(Manip.reverseString("ab")).toBe("ba")
      expect(Manip.reverseString("12345")).toBe("54321")
      expect(Manip.reverseString("racecar")).toBe("racecar")
      expect(Manip.reverseString("!@#$%")).toBe("%$#@!")
      expect(Manip.reverseString("hello world")).toBe("dlrow olleh")
      expect(Manip.reverseString("JavaScript")).toBe("tpircSavaJ")
      expect(Manip.reverseString("palindrome")).toBe("emordnilap")
      expect(Manip.reverseString("  leading and trailing spaces  ")).toBe("  secaps gniliart dna gnidael  ")
      expect(Manip.reverseString("special characters !@#")).toBe("#@! sretcarahc laiceps")
      expect(Manip.reverseString("mixed CASE")).toBe("ESAC dexim")
      expect(Manip.reverseString("singleWord")).toBe("droWelgnis")
   })

   it("should truncate a string", () => {
      expect(Manip.truncateString("hello world", 5)).toBe("hello...")
      expect(Manip.truncateString("hello", 10)).toBe("hello")
      expect(Manip.truncateString("hello world", 0)).toBe("...")
      expect(Manip.truncateString("hello world", 1)).toBe("h...")
      expect(Manip.truncateString("hello world", 11)).toBe("hello world")
      expect(Manip.truncateString("hello world", 10)).toBe("hello worl...")
      expect(Manip.truncateString("hello", 5)).toBe("hello")
      expect(Manip.truncateString("hello", 4)).toBe("hell...")
      expect(Manip.truncateString("hello", 3)).toBe("hel...")
      expect(Manip.truncateString("hello", 2)).toBe("he...")
      expect(Manip.truncateString("a very long string that needs truncation", 10)).toBe("a very lon...")
      expect(Manip.truncateString("short", 10)).toBe("short")
      expect(Manip.truncateString("exactly ten", 10)).toBe("exactly te...")
      expect(Manip.truncateString("  leading and trailing spaces  ", 5)).toBe("  lea...")
      expect(Manip.truncateString("special characters !@#", 8)).toBe("special ...")
   })

   it("should remove all whitespace from a string", () => {
      expect(Manip.removeWhitespace("hello world")).toBe("helloworld")
      expect(Manip.removeWhitespace("  hello   world  ")).toBe("helloworld")
      expect(Manip.removeWhitespace("")).toBe("")
      expect(Manip.removeWhitespace(" ")).toBe("")
      expect(Manip.removeWhitespace("a b c")).toBe("abc")
      expect(Manip.removeWhitespace(" a b c ")).toBe("abc")
      expect(Manip.removeWhitespace("hello\nworld")).toBe("helloworld")
      expect(Manip.removeWhitespace("hello\tworld")).toBe("helloworld")
      expect(Manip.removeWhitespace("hello\r\nworld")).toBe("helloworld")
      expect(Manip.removeWhitespace("hello \t\n\r world")).toBe("helloworld")
      expect(Manip.removeWhitespace("multiple words here")).toBe("multiplewordshere")
      expect(Manip.removeWhitespace("  leading and trailing spaces  ")).toBe("leadingandtrailingspaces")
      expect(Manip.removeWhitespace("special characters !@#")).toBe("specialcharacters!@#")
      expect(Manip.removeWhitespace("mixed CASE")).toBe("mixedCASE")
      expect(Manip.removeWhitespace("singleWord")).toBe("singleWord")
   })

   it("should capitalize the first letter of a string", () => {
      expect(Manip.capitalizeFirstLetter("hello")).toBe("Hello")
      expect(Manip.capitalizeFirstLetter("world")).toBe("World")
      expect(Manip.capitalizeFirstLetter("")).toBe("")
      expect(Manip.capitalizeFirstLetter("a")).toBe("A")
      expect(Manip.capitalizeFirstLetter("A")).toBe("A")
      expect(Manip.capitalizeFirstLetter("hello world")).toBe("Hello world")
      expect(Manip.capitalizeFirstLetter("javaScript")).toBe("JavaScript")
      expect(Manip.capitalizeFirstLetter("123abc")).toBe("123abc")
      expect(Manip.capitalizeFirstLetter("!@#")).toBe("!@#")
      expect(Manip.capitalizeFirstLetter("h")).toBe("H")
      expect(Manip.capitalizeFirstLetter("multiple words here")).toBe("Multiple words here")
      expect(Manip.capitalizeFirstLetter("  leading and trailing spaces  ")).toBe(
         "  leading and trailing spaces  "
      )
      expect(Manip.capitalizeFirstLetter("special characters !@#")).toBe("Special characters !@#")
      expect(Manip.capitalizeFirstLetter("mixed CASE")).toBe("Mixed CASE")
      expect(Manip.capitalizeFirstLetter("singleWord")).toBe("SingleWord")
   })
})
